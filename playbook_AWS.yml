---

- name: AWS EC2 Deployment with GeoServer
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - vars.yml

  tasks:
    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ sec_group }}"
        description: "Security group for application"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow SSH

    - name: Launch EC2 Instance
      amazon.aws.ec2_instance:
        name: "GeoServer-Instance"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ sec_group }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        image_id: "{{ image }}"
        network:
          assign_public_ip: true
        tags:
          Environment: Production
      register: ec2_instance

    - name: Wait for instance to become reachable
      wait_for:
        host: "{{ ec2_instance.instances[0].public_ip }}"
        port: 22
        delay: 10
        timeout: 300
      delegate_to: localhost

    - name: Add instance to inventory
      add_host:
        name: "{{ ec2_instance.instances[0].public_ip }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /path/to/private/key
      delegate_to: localhost

- name: Setup GeoServer Environment
  hosts: all
  become: yes
  tasks:
    - name: Install dependencies
      apt:
        update_cache: yes
        name:
          - git
          - docker.io
          - openjdk-11-jdk
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Clone GeoServer repository
      git:
        repo: https://github.com/geoserver/geoserver.git
        dest: /app
        update: yes

    - name: Install Maven
      apt:
        name: maven
        state: present

    - name: Build WAR file
      shell: mvn clean package -DskipTests
      args:
        chdir: /app/src
      register: build_output
      ignore_errors: yes

    - name: Check if WAR file exists
      stat:
        path: /app/src/web/app/target/geoserver.war
      register: war_file_stat

    - name: Copy WAR file to target node
      copy:
        src: /app/src/web/app/target/geoserver.war
        dest: /tmp/geoserver.war
        mode: '0644'
        remote_src: yes
        delegate_to: "{{ ec2_instance.instances[0].public_ip }}"

- name: Deploy GeoServer on Tomcat
  hosts: "{{ ec2_instance.instances[0].public_ip }}"
  become: yes
  tasks:
    - name: Install Tomcat
      apt:
        name: tomcat9
        state: present

    - name: Deploy GeoServer WAR file
      copy:
        src: /tmp/geoserver.war
        dest: /var/lib/tomcat9/webapps/geoserver.war
        remote_src: yes

    - name: Start Tomcat
      service:
        name: tomcat9
        state: started
        enabled: yes

    - name: Verify GeoServer is running
      uri:
        url: http://{{ ec2_instance.instances[0].public_ip }}:8080/geoserver
        status_code: 200
        validate_certs: no
      register: geoserver_status

    - name: Debug GeoServer status
      debug:
        var: geoserver_status
